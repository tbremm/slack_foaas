"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var errors_1 = require("./errors");
var pkg = require('../package.json'); // tslint:disable-line
function escape(s) { return s.replace('/', ':').replace(' ', '_'); }
exports.errorCodes = {
    PROMISE_TIMEOUT: errors_1.ErrorCode.PromiseTimeout,
};
/**
 * Creates a timeout on a promise.
 *
 * @param ms - The timeout duration.
 * @param promise - The promise that will timeout.
 */
function promiseTimeout(ms, promise) {
    // Create a promise that rejects in `ms` milliseconds
    var timeout = new Promise(function (_resolve, reject) {
        var id = setTimeout(function () {
            clearTimeout(id);
            reject(errors_1.errorWithCode(new Error('Promise timed out'), errors_1.ErrorCode.PromiseTimeout));
        }, ms);
    });
    // Race between our timeout and the passed in `promise`
    return Promise.race([
        promise,
        timeout,
    ]);
}
exports.promiseTimeout = promiseTimeout;
// NOTE: before this can be an external module:
// 1. are all the JS features supported back to a reasonable version?
//    default params, template strings, computed property names
// 2. access to `pkg` will change
// 3. tests
// there will potentially be more named exports in this file
function packageIdentifier(addons) {
    var _a;
    if (addons === void 0) { addons = {}; }
    var identifierMap = Object.assign((_a = {},
        _a[pkg.name] = pkg.version,
        _a[os_1.default.platform()] = os_1.default.release(),
        _a.node = process.version.replace('v', ''),
        _a), addons);
    return Object.keys(identifierMap).reduce(function (acc, k) { return acc + " " + escape(k) + "/" + escape(identifierMap[k]); }, '');
}
exports.packageIdentifier = packageIdentifier;
/**
 * Tests a "thing" for being falsy. See: https://developer.mozilla.org/en-US/docs/Glossary/Falsy
 *
 * @param x - The "thing" whose falsy-ness to test.
 */
function isFalsy(x) {
    // NOTE: there's no way to type `x is NaN` currently (as of TypeScript v3.5)
    return x === 0 || x === '' || x === null || x === undefined || (typeof x === 'number' && isNaN(x));
}
exports.isFalsy = isFalsy;
//# sourceMappingURL=util.js.map